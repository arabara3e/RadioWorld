te propose une revue de code pr√™te √† copier-coller, classe

GetEERDataManagementImpl.java

Points positifs

D√©coupage clair load ‚Üí map ‚Üí return.

Tests unitaires pr√©sents.

Utilisation d‚Äôun DTO de sortie d√©di√©.


Am√©liorations propos√©es

Nommage : mainProcedure ‚Üí loadFolder, aImResponse ‚Üí buildResponse (et corriger le ¬´ I ¬ª majuscule).

Validation d‚Äôentr√©e : rejeter null/blank pour clientId (ex: Assert.hasText(clientId, "clientId must not be empty"); ou @Pattern c√¥t√© API).

Repo : faire retourner un Optional<Folder> (selectFolderByKey) et utiliser ifPresent.

Gestion d‚Äôerreurs : capturer DataAccessException et relancer une exception m√©tier (EerCorporateException) avec code/message standardis√©s.

Logging : messages plus informatifs et structur√©s, sans PII.
Exemple: LOG.info("RetrieveEERData request clientId={}", safeClientId(clientId));

Mapper d√©di√© : extraire la construction de r√©ponse dans un Folder‚ÜíCustomerEERDataGetResponseMapper (facilement testable).

Horloge : √©viter now() diss√©min√©; si n√©cessaire, injecter un Clock.


Mini-extrait

public CustomerEERDataGetResponse getByClientId(String clientId) {
  Assert.hasText(clientId, "clientId must not be empty");
  LOG.info("Retrieve EER data clientId={}", clientId);

  var folderOpt = folderRepository.selectFolderByKey(clientId); // Optional<Folder>
  return folderOpt.map(folderMapper::toResponse)
                  .orElseGet(CustomerEERDataGetResponse::notFound);
}


---

GetEERDataWorking.java

Points positifs

Objet ¬´ tampon ¬ª simple, code lisible.


Am√©liorations propos√©es

L‚Äôobjet de travail est mutables + √©tat dispers√© : on peut soit

le supprimer au profit de variables locales, soit

le rendre immuable (record) si tu veux garder la structure.


√âviter now() dans ce type d‚Äôobjet; si l‚Äôheure est utile, passer une LocalDateTime depuis le service (ou Clock).

Harmoniser les noms et commentaires en anglais pour coh√©rence d‚Äô√©quipe.


Alternative concise

public record GetEERDataWorking(
    String clientId,
    Folder folder,
    LocalDateTime processingTime,
    CustomerEERDataGetResponse response
) {}


---

CustomerEERDataGetResponse.java

Points positifs

DTO s√©par√© du domaine, clair.

Champs m√©tiers explicites (priority, requestedDate, ‚Ä¶).


Am√©liorations propos√©es

Immutabilit√© : passer en builder/record (ou Lombok @Value @Builder) pour √©viter setters.

Noms homog√®nes : crcUserId vs cacmUserId ‚Üí s‚Äôassurer de la coh√©rence (acronymes valid√©s m√©tier).

Dates : si possible LocalDate avec une configuration Jackson (@JsonFormat(pattern="yyyy-MM-dd")) plut√¥t que String.

M√©thode utilitaire : ajouter un static notFound() pour le cas 204/empty.


Mini-extrait

@Value
@Builder
public class CustomerEERDataGetResponse {
  boolean folderFound;
  String crcUserId;
  String cacmUserId;
  String priorityCode;
  LocalDate requestedDate;
  String priorityReason;

  public static CustomerEERDataGetResponse notFound() {
    return CustomerEERDataGetResponse.builder().folderFound(false).build();
  }
}


---

ApiRetrieveEERData.java (controller)

Points positifs

Annotations OpenAPI compl√®tes üëç

M√©thode returnError centralis√©e.


Am√©liorations propos√©es

Validation : @Pattern ou @Size sur @PathVariable("clientId") + @Validated (d√©j√† pr√©sent) ‚Üí garantir le 400.

Statuts :

Si folderFound=false ‚Üí envisager 204 No Content (tes tests semblent d√©j√† le viser).

Sinon 200 OK avec DTO.


Transactionnel : @Transactional(readOnly = true) si tu veux, mais non indispensable sur un contr√¥leur si la couche service l‚Äôa d√©j√†.

Logs : log d‚Äôentr√©e + dur√©e (optionnel, via StopWatch).


Mini-extrait

@GetMapping(value="/v1/clients/{clientId}/directories", produces = MediaType.APPLICATION_JSON_VALUE)
public ResponseEntity<?> retrieve(@PathVariable @Pattern(regexp="\\d{10,}") String clientId,
                                  @RequestHeader("UserId") String userId) {
  var resp = getEERDataManagement.getByClientId(clientId);
  if (!resp.isFolderFound()) return ResponseEntity.noContent().build();
  return ResponseEntity.ok(customerEERDataDTOMapper.map(resp));
}


---

CustomerEERDataDTO.java

Points positifs

Builder manuel lisible.

DTO d‚Äôexposition distinct du DTO domaine.


Am√©liorations propos√©es

Lombok pour all√©ger le builder ou passer par MapStruct pour la conversion.

Null-safety : s‚Äôassurer que les champs trim√©s le sont sans NPE (voir mapper).

@Schema au niveau champ si l‚ÄôOpenAPI doit afficher des exemples (example = "HIGH" / "2025-01-31").



---

CustomerEERDataDTOMapper.java

Points positifs

Mapper s√©par√© ‚úÖ


Am√©liorations propos√©es

Les getXxx().trim() peuvent lever un NPE si null.
‚Üí Utiliser StringUtils.trimToNull() (Apache) ou utilitaire local.

Isoler la logique de formatage de dates dans le mapper (unique point).


Mini-extrait

public static CustomerEERDataDTO map(CustomerEERDataGetResponse r) {
  return CustomerEERDataDTO.builder()
      .setCrcUserId(trim(r.getCrcUserId()))
      .setCacmUserId(trim(r.getCacmUserId()))
      .setPriorityCode(trim(r.getPriorityCode()))
      .setRequestedDate(r.getRequestedDate() != null ? r.getRequestedDate().toString() : null)
      .setPriorityReason(trim(r.getPriorityReason()))
      .build();
}
private static String trim(String s){ return s==null? null : s.trim(); }


---

GetEERDataManagementImplTest.java

Points positifs

Cas ¬´ success ¬ª et ¬´ empty folder ¬ª couverts.

Usage de Mockito clair.


Am√©liorations propos√©es

Utiliser @ExtendWith(MockitoExtension.class) au lieu de initMocks.

Ajouter les cas :

clientId vide ‚Üí IllegalArgumentException (ou 400 via contr√¥leur).

Exception repo (DataAccessException) ‚Üí EerCorporateException.

V√©rifier le format de date attendu.


√âviter les magic strings : extraire en constantes (CLIENT_ID_OK, REQUESTED_DATE).

Retirer andDo(print()) des tests d‚ÄôAPI (bruite les logs de CI).



---

ApiRetrieveEERDataTest.java

Points positifs

Tests 200/400/500 bien pos√©s.

Mock MVC bien utilis√©.


Am√©liorations propos√©es

Ajouter le cas 204 No Content (folder not found).

V√©rifier le content-type + payload pour 200 via jsonPath.

Regrouper l‚ÄôURL en constante (URL_GET_EER_DATA).

Test du header UserId manquant (si requis) ‚Üí 400.


Mini-extrait

mockMvc.perform(get(URL_GET_EER_DATA, clientId).header("UserId","User123"))
  .andExpect(status().isOk())
  .andExpect(content().contentType(MediaType.APPLICATION_JSON))
  .andExpect(jsonPath("$.priorityCode").value("PR"));


---

BaseResourceTest.java

Remarque rapide

Si ce test ne v√©rifie que la pr√©sence de beans ou l‚Äôinitialisation de contexte, ok.
√âvite de lister des impls concr√®tes si le wiring peut changer; pr√©f√®re un @SpringBootTest smoke test minimal.



---

Petites recommandations transverses

Uniformiser la langue dans le code (anglais) et garder le fran√ßais pour la doc fonctionnelle.

Pas de PII dans les logs (masquer/anonymiser les identifiants si sensibles).

Constantes : extraire codes erreurs, patterns de validation, formats de date.

Sonar/Qualit√© : activer les r√®gles OptionalUsedAsField, NullAway/SpotBugs si possible.

MapStruct : si la cartographie se multiplie, √ßa simplifiera (et √©vite les trim() oubli√©s).



---

Si tu veux, je peux te proposer un patch consolid√© (service + mapper + validations + 4 tests compl√©mentaires) sur la base de vos conventions.

